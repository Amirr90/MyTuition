Index: .idea/shelf/Uncommitted_changes_before_Update_at_6_28_2021_2_44_PM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_6_28_2021_2_44_PM_[Default_Changelist]/shelved.patch	(revision de09e59bbe5a479302c70f5a0f7dacab9b1c7dca)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_6_28_2021_2_44_PM_[Default_Changelist]/shelved.patch	(revision de09e59bbe5a479302c70f5a0f7dacab9b1c7dca)
@@ -1,25 +0,0 @@
-Index: app/src/main/java/com/mytuition/utility/AppUtils.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.mytuition.utility;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.ProgressDialog;\r\nimport android.content.ActivityNotFoundException;\r\nimport android.content.ContentResolver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.IBinder;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.view.animation.Animation;\r\nimport android.view.animation.AnimationUtils;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.webkit.MimeTypeMap;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.google.android.gms.tasks.OnCanceledListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.OnProgressListener;\r\nimport com.google.firebase.storage.StorageReference;\r\nimport com.google.firebase.storage.UploadTask;\r\nimport com.google.gson.Gson;\r\nimport com.mytuition.R;\r\nimport com.mytuition.interfaces.ApiInterface;\r\nimport com.mytuition.interfaces.UploadImageInterface;\r\nimport com.mytuition.models.CalendarModel;\r\nimport com.mytuition.models.SpecialityModel;\r\nimport com.mytuition.models.TeacherModel;\r\nimport com.mytuition.models.TimeSlotModel;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\nimport org.json.JSONTokener;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.sql.Timestamp;\r\nimport java.text.NumberFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.GregorianCalendar;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\n\r\n\r\npublic class AppUtils {\r\n    private static final String TAG = \"AppUtils\";\r\n    public static Toast mToast;\r\n\r\n    private static final int SECOND_MILLIS = 1000;\r\n    private static final int MINUTE_MILLIS = 60 * SECOND_MILLIS;\r\n    private static final int HOUR_MILLIS = 60 * MINUTE_MILLIS;\r\n    private static final int DAY_MILLIS = 24 * HOUR_MILLIS;\r\n    static ProgressDialog progressDialog;\r\n\r\n    public static final String MY_PREFS_NAME = \"myPref\";\r\n    static int uploadImageCounter = 0;\r\n\r\n\r\n    public static List<String> getAllSpeciality() {\r\n        List<String> speciality = new ArrayList<>();\r\n        speciality.add(\"English\");\r\n        speciality.add(\"Hindi\");\r\n        speciality.add(\"Maths\");\r\n        speciality.add(\"Science\");\r\n        speciality.add(\"Computer\");\r\n        speciality.add(\"Java\");\r\n        speciality.add(\"Physics\");\r\n        speciality.add(\"Hindi\");\r\n        speciality.add(\"Chemistry\");\r\n        speciality.add(\"All Subject\");\r\n        return speciality;\r\n    }\r\n\r\n    public static String getMimeType(Context context, Uri uri) {\r\n        String mimeType = null;\r\n        if (uri.getScheme().equals(ContentResolver.SCHEME_CONTENT)) {\r\n            ContentResolver cr = context.getContentResolver();\r\n            mimeType = cr.getType(uri);\r\n        } else {\r\n            String fileExtension = MimeTypeMap.getFileExtensionFromUrl(uri\r\n                    .toString());\r\n            mimeType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(\r\n                    fileExtension.toLowerCase());\r\n        }\r\n        return mimeType;\r\n    }\r\n\r\n\r\n    public static List<TimeSlotModel.TimeDetails> getSlots(boolean b, int i, int i1) {\r\n        List<TimeSlotModel.TimeDetails> s1 = new ArrayList<>();\r\n        ArrayList<String> results = getTimeSet(b, i, i1, 60);\r\n        for (String s : results)\r\n            s1.add(new TimeSlotModel.TimeDetails(s, false));\r\n        return s1;\r\n    }\r\n\r\n    public static ArrayList<String> getTimeSet(boolean isCurrentDay, int from, int to, int duration) {\r\n        double hrs = (float) duration / 60;\r\n        Log.d(TAG, \"getTimeSet: hrs \" + (int) ((to - from) / hrs));\r\n        ArrayList results = new ArrayList<String>();\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"hh:mm a\");\r\n        Calendar calendar = new GregorianCalendar();\r\n        calendar.set(Calendar.HOUR_OF_DAY, 0);// what should be the default?\r\n        if (!isCurrentDay)\r\n            calendar.set(Calendar.HOUR_OF_DAY, from);\r\n        calendar.set(Calendar.MINUTE, 0);\r\n        calendar.set(Calendar.SECOND, 0);\r\n        int count = (int) ((to - from) / hrs);\r\n        for (int i = 0; i < count; i++) {\r\n\r\n            String day1 = sdf.format(calendar.getTime());\r\n            calendar.add(Calendar.MINUTE, duration);\r\n\r\n            String day2 = sdf.format(calendar.getTime());\r\n\r\n            String day = day1 + \" - \" + day2;\r\n\r\n            results.add(i, day);\r\n\r\n        }\r\n        return results;\r\n    }\r\n\r\n\r\n    public static List<CalendarModel> getNextWeekDays() {\r\n        List<CalendarModel> calendarModelList = new ArrayList<>();\r\n        ArrayList<HashMap<String, String>> getNextWeekDays = getNextWeekDay();\r\n        for (int a = 1; a < getNextWeekDays.size(); a++) {\r\n            calendarModelList.add(new CalendarModel(\r\n                    getNextWeekDays.get(a).get(\"date\"),\r\n                    getNextWeekDays.get(a).get(\"day\"),\r\n                    getNextWeekDays.get(a).get(\"dateSend\")));\r\n        }\r\n        return calendarModelList;\r\n    }\r\n\r\n    public static void showRequestDialog(Activity activity) {\r\n\r\n\r\n        try {\r\n            if (!((Activity) activity).isFinishing()) {\r\n                if (progressDialog == null) {\r\n                    progressDialog = new ProgressDialog(activity);\r\n                    progressDialog = ProgressDialog.show(activity, null, null, false, true);\r\n                    progressDialog.getWindow().setBackgroundDrawable(new ColorDrawable(activity.getResources().getColor(android.R.color.transparent)));\r\n                    progressDialog.setContentView(R.layout.progress_bar);\r\n                    progressDialog.show();\r\n                } else {\r\n                    progressDialog = ProgressDialog.show(activity, null, null, false, true);\r\n                    progressDialog.getWindow().setBackgroundDrawable(new ColorDrawable(activity.getResources().getColor(android.R.color.transparent)));\r\n                    progressDialog.setContentView(R.layout.progress_bar);\r\n                    progressDialog.show();\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static List<SpecialityModel> getClassData() {\r\n        List<SpecialityModel> specialityModels = new ArrayList<>();\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 1\", \"1\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 2\", \"2\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 3\", \"3\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 4\", \"4\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 5\", \"5\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 6\", \"6\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 7\", \"7\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 8\", \"8\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 9 (UP Board)\", \"9\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 10 (UP Board)\", \"10\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 10 (ICSE Board)\", \"11\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 10 (ICSE Board)\", \"12\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 11 (UP Board)\", \"13\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 11 (UP Board)\", \"14\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 12 (ISE Board)\", \"15\", false));\r\n        specialityModels.add(new SpecialityModel(\"\", \"Class 12 (ISE Board)\", \"16\", false));\r\n        AppUtils.hideDialog();\r\n        return specialityModels;\r\n\r\n    }\r\n\r\n    public static void hideDialog() {\r\n        try {\r\n            if (progressDialog != null && progressDialog.isShowing()) {\r\n                progressDialog.dismiss();\r\n                progressDialog = null;\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static String getJSONFromModel(Object o) {\r\n        Gson gson = new Gson();\r\n        String jsonString = gson.toJson(o);\r\n        try {\r\n            JSONObject request = new JSONObject(jsonString);\r\n            return request.toString();\r\n        } catch (JSONException e) {\r\n            e.printStackTrace();\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    public static void updateTeacherProfile(TeacherModel teacherModel, final ApiInterface apiInterface) {\r\n        Log.d(TAG, \"getUid: \" + getUid());\r\n        getFirestoreReference().collection(\"Users\").document(getUid()).update(getTeacherProfileMap(teacherModel))\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n                        apiInterface.onSuccess(\"Profile Updated Successfully !!\");\r\n                    }\r\n                }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n                apiInterface.onFailed(\"failed to upload Image, try again !!\");\r\n                Log.d(TAG, \"onFailureUpdateProfile: \" + e.getLocalizedMessage());\r\n            }\r\n        }).addOnCanceledListener(new OnCanceledListener() {\r\n            @Override\r\n            public void onCanceled() {\r\n                apiInterface.onFailed(\"cancel to update profile, try again !!\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private static Map<String, Object> getTeacherProfileMap(TeacherModel teacherModel) {\r\n        Map<String, Object> map = new HashMap<>();\r\n        map.put(\"image\", teacherModel.getImage());\r\n        map.put(\"name\", teacherModel.getName());\r\n        map.put(\"fatherName\", teacherModel.getFatherName());\r\n        map.put(\"email\", teacherModel.getEmail());\r\n        map.put(\"experience\", teacherModel.getExperience());\r\n        map.put(\"rating\", teacherModel.getRating());\r\n        map.put(\"review\", teacherModel.getReview());\r\n        map.put(\"speciality\", teacherModel.getSpeciality());\r\n        map.put(\"fee\", teacherModel.getFee());\r\n        map.put(\"perVisit\", teacherModel.getPerVisit());\r\n        map.put(\"degree\", teacherModel.getDegree());\r\n        map.put(\"collegeName\", teacherModel.getCollegeName());\r\n        map.put(\"address\", teacherModel.getAddress());\r\n        map.put(\"landMark\", teacherModel.getLandMark());\r\n        map.put(\"city\", teacherModel.getCity());\r\n        map.put(\"state\", teacherModel.getState());\r\n        map.put(\"aadharFrontImage\", teacherModel.getAadharFrontImage());\r\n        map.put(\"aadharBackImage\", teacherModel.getAadharBackImage());\r\n        Log.d(TAG, \"getTeacherProfileMap: \" + map);\r\n        return map;\r\n    }\r\n\r\n    public static void uploadImages(final List<Bitmap> bitmaps, final UploadImageInterface uploadImageInterface) {\r\n\r\n        final List<String> uploadedImageUrl = new ArrayList<>();\r\n        FirebaseStorage storage = FirebaseStorage.getInstance();\r\n        final StorageReference storageRef = storage.getReference();\r\n\r\n\r\n        for (uploadImageCounter = 0; uploadImageCounter < bitmaps.size(); uploadImageCounter++) {\r\n\r\n            final String STORAGE_PATH = \"aadhar_image/\" + getUid() + \"/\" + System.currentTimeMillis() + \".jpg\";\r\n            StorageReference spaceRef = storageRef.child(STORAGE_PATH);\r\n\r\n            Log.d(TAG, \"uploadImages: \" + uploadImageCounter);\r\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n            bitmaps.get(uploadImageCounter).compress(Bitmap.CompressFormat.JPEG, 75, baos);\r\n            byte[] compressData = baos.toByteArray();\r\n            UploadTask uploadTask = spaceRef.putBytes(compressData);\r\n\r\n            uploadTask.addOnProgressListener(new OnProgressListener<UploadTask.TaskSnapshot>() {\r\n                @Override\r\n                public void onProgress(@NonNull UploadTask.TaskSnapshot taskSnapshot) {\r\n                    //  double progress = (100.0 * taskSnapshot.getBytesTransferred()) / taskSnapshot.getTotalByteCount();\r\n                }\r\n            }).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {\r\n                @Override\r\n                public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {\r\n                    storageRef.child(STORAGE_PATH).getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {\r\n                        @Override\r\n                        public void onSuccess(Uri uri) {\r\n                            uploadedImageUrl.add(uri.toString());\r\n                            if (uploadImageCounter == (bitmaps.size())) {\r\n                                Log.d(TAG, \"onSuccessEqual: \" + uploadImageCounter);\r\n                                uploadImageInterface.onSuccess(uploadedImageUrl);\r\n                            } else Log.d(TAG, \"onSuccess: notEqual \" + uploadImageCounter);\r\n\r\n                        }\r\n                    });\r\n\r\n                }\r\n            }).addOnCanceledListener(new OnCanceledListener() {\r\n                @Override\r\n                public void onCanceled() {\r\n                    uploadImageInterface.onFailed(\"Upload cancelled, try again\");\r\n                }\r\n            }).addOnFailureListener(new OnFailureListener() {\r\n                @Override\r\n                public void onFailure(@NonNull Exception e) {\r\n                    uploadImageInterface.onFailed(\"failed to upload Image \" + e.getLocalizedMessage());\r\n                }\r\n            });\r\n            \r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    private void showPdf(String filePath) {\r\n        Intent intent = new Intent(Intent.ACTION_VIEW);\r\n        intent.setDataAndType(Uri.parse(filePath), \"application/pdf\");\r\n        try {\r\n\r\n        } catch (ActivityNotFoundException e) {\r\n            Log.d(TAG, \"showPdf: \" + e.getLocalizedMessage());\r\n        }\r\n    }\r\n\r\n    public static String parseDate(String inDate, String outPattern) {\r\n\r\n        String inputPattern = \"dd/MM/yy\";\r\n        SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);\r\n        SimpleDateFormat outputFormat = new SimpleDateFormat(outPattern);\r\n\r\n        Date date = null;\r\n        String str = null;\r\n\r\n        try {\r\n            date = inputFormat.parse(inDate);\r\n            str = outputFormat.format(date);\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return str;\r\n\r\n    }\r\n\r\n\r\n    public static String getDayOfWeekDayFromDate(String date) {\r\n        String dayName = \"\";\r\n        SimpleDateFormat inFormat = new SimpleDateFormat(\"yyyy/MM/dd\");\r\n        try {\r\n            Date myDate = inFormat.parse(date);\r\n            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"EEE, MMM d\");\r\n            dayName = simpleDateFormat.format(myDate);\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return dayName;\r\n\r\n    }\r\n\r\n    public static String getCurrentDateInWeekMonthDayFormat() {\r\n\r\n        Date c = Calendar.getInstance().getTime();\r\n        System.out.println(\"Current Date => \" + c);\r\n\r\n        SimpleDateFormat df = new SimpleDateFormat(\"EEE, MMM d\");\r\n        String formattedDate = df.format(c);\r\n\r\n        return formattedDate;\r\n    }\r\n\r\n    public static void showToastSort(Context context, String text) {\r\n        if (mToast != null && mToast.getView().isShown()) {\r\n            mToast.cancel();\r\n        }\r\n        mToast = Toast.makeText(context, text, Toast.LENGTH_LONG);\r\n        mToast.show();\r\n    }\r\n\r\n    public static boolean isEmailValid(String email) {\r\n\r\n        boolean isValid = false;\r\n\r\n        String expression = \"^[\\\\w\\\\.-]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,4}$\";\r\n        CharSequence inputStr = email;\r\n\r\n        Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);\r\n        Matcher matcher = pattern.matcher(inputStr);\r\n        if (matcher.matches()) {\r\n            isValid = true;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    public static void hideSoftKeyboard(Activity activity) {\r\n        if (activity != null) {\r\n            try {\r\n                @SuppressLint(\"WrongConstant\") InputMethodManager inputMethodManager = (InputMethodManager) activity.getSystemService(\"input_method\");\r\n                View view = activity.getCurrentFocus();\r\n                if (view != null) {\r\n                    IBinder binder = view.getWindowToken();\r\n                    if (binder != null) {\r\n                        inputMethodManager.hideSoftInputFromWindow(binder, 0);\r\n                    }\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);\r\n\r\n    }\r\n\r\n    public static boolean isNetworkConnected(Context context) {\r\n        ConnectivityManager connectivity = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        if (connectivity != null) {\r\n            NetworkInfo info = connectivity.getActiveNetworkInfo();\r\n            if (info != null) {\r\n                if (info.getState() == NetworkInfo.State.CONNECTED) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static String getDateInDMYFormatFromTimestamp(long currentTimeMillis) {\r\n        try {\r\n            String value = new java.text.SimpleDateFormat(\"yyyy-MM-dd\").\r\n                    format(new java.util.Date(currentTimeMillis));\r\n            return value;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    public static String getTimeFormat(long currentTimeMillis, String outFormat) {\r\n        try {\r\n            String value = new java.text.SimpleDateFormat(outFormat).\r\n                    format(new java.util.Date(currentTimeMillis));\r\n            return value;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static Animation fadeIn(Activity activity) {\r\n        return AnimationUtils.loadAnimation(activity, R.anim.fade_in);\r\n    }\r\n\r\n    public static Animation fadeOut(Activity activity) {\r\n        return AnimationUtils.loadAnimation(activity, R.anim.fade_out);\r\n    }\r\n\r\n\r\n    public static void setString(String key, String value, Activity activity) {\r\n        SharedPreferences sharedpreferences = activity.getSharedPreferences(MY_PREFS_NAME, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = sharedpreferences.edit();\r\n        editor.putString(key, value);\r\n        editor.commit();\r\n    }\r\n\r\n    public static void setBoolean(String key, boolean value, Activity activity) {\r\n        SharedPreferences sharedpreferences = activity.getSharedPreferences(MY_PREFS_NAME, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = sharedpreferences.edit();\r\n        editor.putBoolean(key, value);\r\n        editor.commit();\r\n    }\r\n\r\n    public static String getString(String key, Activity activity) {\r\n        if (activity != null) {\r\n            SharedPreferences pref = activity.getSharedPreferences(MY_PREFS_NAME, MODE_PRIVATE);\r\n            return pref.getString(key, \"\");\r\n        } else return null;\r\n\r\n    }\r\n\r\n    public static boolean getBoolean(String key, Activity activity) {\r\n        SharedPreferences pref = activity.getSharedPreferences(MY_PREFS_NAME, MODE_PRIVATE);\r\n        return pref.getBoolean(key, true);\r\n    }\r\n\r\n    public static ArrayList<HashMap<String, String>> getNextWeekDay() {\r\n        ArrayList<HashMap<String, String>> list = new ArrayList<>();\r\n        HashMap<String, String> hashMap = new HashMap<>();\r\n        SimpleDateFormat sdfDate = new SimpleDateFormat(\"dd\", Locale.getDefault());\r\n        SimpleDateFormat sdfDay = new SimpleDateFormat(\"EEE\", Locale.getDefault());\r\n        SimpleDateFormat sdfDateSend = new SimpleDateFormat(\"yyyy/MM/dd\", Locale.getDefault());\r\n        for (int i = 0; i < 8; i++) {\r\n            hashMap = new HashMap<>();\r\n\r\n            Calendar calendar = Calendar.getInstance();\r\n            calendar.add(Calendar.DATE, i);\r\n            String date = sdfDate.format(calendar.getTime());\r\n            String day = sdfDay.format(calendar.getTime());\r\n            String dateSend = sdfDateSend.format(calendar.getTime());\r\n\r\n            hashMap.put(\"date\", date);\r\n            hashMap.put(\"day\", day);\r\n            hashMap.put(\"dateSend\", dateSend);\r\n\r\n            list.add(hashMap);\r\n\r\n        }\r\n        return list;\r\n    }\r\n\r\n\r\n    public static String getDayFromDate(String incomingDate) {\r\n        String inputPattern = \"dd/MM/yyyy\";\r\n        String outputPattern = \"EEE\";\r\n        SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);\r\n        SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern);\r\n\r\n        Date date = null;\r\n        String str = null;\r\n\r\n        try {\r\n            date = inputFormat.parse(incomingDate);\r\n            str = outputFormat.format(date);\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return str;\r\n    }\r\n\r\n\r\n    public static JSONObject objectToJSONObject(Object object){\r\n        Object json = null;\r\n        JSONObject jsonObject = null;\r\n        try {\r\n            json = new JSONTokener(object.toString()).nextValue();\r\n        } catch (JSONException e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (json instanceof JSONObject) {\r\n            jsonObject = (JSONObject) json;\r\n        }\r\n        return jsonObject;\r\n    }\r\n\r\n    public static JSONArray objectToJSONArray(Object object){\r\n        Object json = null;\r\n        JSONArray jsonArray = null;\r\n        try {\r\n            json = new JSONTokener(object.toString()).nextValue();\r\n        } catch (JSONException e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (json instanceof JSONArray) {\r\n            jsonArray = (JSONArray) json;\r\n        }\r\n        return jsonArray;\r\n    }\r\n\r\n    public static String sdfFromTimeStamp(String outPattern) {\r\n        Date date = new Date();\r\n        Timestamp ts = new Timestamp(date.getTime());\r\n        SimpleDateFormat formatter = new SimpleDateFormat(outPattern);\r\n        System.out.println(formatter.format(ts));\r\n        return formatter.format(ts);\r\n    }\r\n\r\n    public static String getMonthFromDate(String incomingDate) {\r\n        String inputPattern = \"dd/MM/yyyy\";\r\n        String outputPattern = \"MMM\";\r\n        SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);\r\n        SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern);\r\n\r\n        Date date = null;\r\n        String str = null;\r\n\r\n        try {\r\n            date = inputFormat.parse(incomingDate);\r\n            str = outputFormat.format(date);\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static String getDateFromDate(String incomingDate) {\r\n        String inputPattern = \"dd/MM/yyyy\";\r\n        String outputPattern = \"dd\";\r\n        SimpleDateFormat inputFormat = new SimpleDateFormat(inputPattern);\r\n        SimpleDateFormat outputFormat = new SimpleDateFormat(outputPattern);\r\n\r\n        Date date = null;\r\n        String str = null;\r\n\r\n        try {\r\n            date = inputFormat.parse(incomingDate);\r\n            str = outputFormat.format(date);\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return str;\r\n    }\r\n\r\n\r\n    public static String getTimeAgo(long time) {\r\n        if (time < 1000000000000L) {\r\n            time *= 1000;\r\n        }\r\n        long now = System.currentTimeMillis();\r\n        if (time > now || time <= 0) {\r\n            return null;\r\n        }\r\n        final long diff = now - time;\r\n        if (diff < MINUTE_MILLIS) {\r\n            return \"just now\";\r\n        } else if (diff < 2 * MINUTE_MILLIS) {\r\n            return \"a minute ago\";\r\n        } else if (diff < 50 * MINUTE_MILLIS) {\r\n            return diff / MINUTE_MILLIS + \" minutes ago\";\r\n        } else if (diff < 90 * MINUTE_MILLIS) {\r\n            return \"an hour ago\";\r\n        } else if (diff < 24 * HOUR_MILLIS) {\r\n            return diff / HOUR_MILLIS + \" hours ago\";\r\n        } else if (diff < 48 * HOUR_MILLIS) {\r\n            return \"yesterday\";\r\n        } else {\r\n            return diff / DAY_MILLIS + \" days ago\";\r\n        }\r\n    }\r\n\r\n    public static String getDateInDMY(long timestamp) {\r\n        SimpleDateFormat formatter = new SimpleDateFormat(\"EEE, MMM d, ''yy\");\r\n        Calendar calendar = Calendar.getInstance();\r\n        calendar.setTimeInMillis((int) timestamp);\r\n        return formatter.format(calendar.getTime());\r\n    }\r\n\r\n\r\n    public static void getFcmToken(final Activity activity) {\r\n/*\r\n        FirebaseInstanceId.getInstance().getInstanceId().addOnSuccessListener(instanceIdResult -> {\r\n            String newToken = instanceIdResult.getToken();\r\n            setString(fcmToken, newToken, activity);\r\n            Log.e(\"newToken2\", newToken);\r\n        });*/\r\n\r\n    }\r\n\r\n\r\n    public static FirebaseUser getCurrentUser() {\r\n        return FirebaseAuth.getInstance().getCurrentUser();\r\n    }\r\n\r\n    public static FirebaseFirestore getFirestoreReference() {\r\n        return FirebaseFirestore.getInstance();\r\n    }\r\n\r\n    public static String getUid() {\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        if (null != user)\r\n            return user.getUid();\r\n        else return null;\r\n    }\r\n\r\n    public static String getCurrencyFormat(double num) {\r\n        String COUNTRY = \"IN\";\r\n        String LANGUAGE = \"en\";\r\n        return NumberFormat.getCurrencyInstance(new Locale(LANGUAGE, COUNTRY)).format(num);\r\n    }\r\n\r\n    public static String getCurrencyFormat(long num) {\r\n        String COUNTRY = \"IN\";\r\n        String LANGUAGE = \"en\";\r\n        return NumberFormat.getCurrencyInstance(new Locale(LANGUAGE, COUNTRY)).format(num);\r\n    }\r\n\r\n    public static String getCurrencyFormat(String num) {\r\n        Double number = Double.parseDouble(num);\r\n        String COUNTRY = \"IN\";\r\n        String LANGUAGE = \"en\";\r\n        return NumberFormat.getCurrencyInstance(new Locale(LANGUAGE, COUNTRY)).format(number);\r\n\r\n    }\r\n\r\n    public static void showToolbar(Activity activity) {\r\n        Objects.requireNonNull(((AppCompatActivity) activity).getSupportActionBar()).show();\r\n    }\r\n\r\n    public static void hideToolbar(Activity activity) {\r\n        Objects.requireNonNull(((AppCompatActivity) activity).getSupportActionBar()).hide();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/mytuition/utility/AppUtils.java	(revision 82d8ea87b98a2b5b69247f8b715290fd9e3346e1)
-+++ app/src/main/java/com/mytuition/utility/AppUtils.java	(date 1624871331380)
-@@ -9,7 +9,6 @@
- import android.content.Intent;
- import android.content.SharedPreferences;
- import android.graphics.Bitmap;
--import android.graphics.drawable.BitmapDrawable;
- import android.graphics.drawable.ColorDrawable;
- import android.net.ConnectivityManager;
- import android.net.NetworkInfo;
-@@ -32,7 +31,6 @@
- import com.google.android.gms.tasks.OnSuccessListener;
- import com.google.firebase.auth.FirebaseAuth;
- import com.google.firebase.auth.FirebaseUser;
--import com.google.firebase.firestore.DocumentReference;
- import com.google.firebase.firestore.FirebaseFirestore;
- import com.google.firebase.storage.FirebaseStorage;
- import com.google.firebase.storage.OnProgressListener;
Index: .idea/shelf/Uncommitted_changes_before_Update_at_6_28_2021_2_44_PM__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_6_28_2021_2_44_PM__Default_Changelist_.xml	(revision de09e59bbe5a479302c70f5a0f7dacab9b1c7dca)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_6_28_2021_2_44_PM__Default_Changelist_.xml	(revision de09e59bbe5a479302c70f5a0f7dacab9b1c7dca)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_6_28_2021_2_44_PM_[Default_Changelist]" date="1624871641397" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_28_2021_2_44_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 6/28/2021 2:44 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
